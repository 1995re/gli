///////////////////////////////////////////////////////////////////////////////////
/// OpenGL Image (gli.g-truc.net)
///
/// Copyright (c) 2008 - 2013 G-Truc Creation (www.g-truc.net)
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the "Software"), to deal
/// in the Software without restriction, including without limitation the rights
/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
/// copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
/// THE SOFTWARE.
///
/// @ref core
/// @file gli/core/format.inl
/// @date 2012-10-16 / 2012-10-16
/// @author Christophe Riccio
///////////////////////////////////////////////////////////////////////////////////

namespace gli{
namespace detail
{
	enum
	{
		CAP_COMPRESSED_BIT = (1 << 0),
		CAP_PACKED_BIT = (1 << 1),
		CAP_NORMALIZED_BIT = (1 << 2),
		CAP_UNSIGNED_BIT = (1 << 3),
		CAP_SIGNED_BIT = (1 << 4),
		CAP_INTEGER_BIT = (1 << 5),
		CAP_FLOAT_BIT = (1 << 6),
		CAP_DEPTH_BIT = (1 << 7),
		CAP_STENCIL_BIT = (1 << 8),
		CAP_COLORSPACE_SRGB_BIT = (1 << 9),
		CAP_SWIZZLE_BIT = (1 << 10),
		CAP_LUMINANCE_ALPHA_BIT = (1 << 11)
	};

	struct format_info
	{
		std::uint8_t BlockSize;
		std::uint8_t BlockDimensionsX;
		std::uint8_t BlockDimensionsY;
		std::uint8_t Component;
		std::uint16_t Flags;
	};

	inline format_info const & getFormatInfo(format const & Format)
	{
		static format_info const Table[] =
		{
			// unorm formats
			{  1, 1, 1, 1, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},					//R8_UNORM,
			{  2, 1, 1, 2, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},					//RG8_UNORM,
			{  3, 1, 1, 3, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},					//RGB8_UNORM,
			{  4, 1, 1, 4, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},					//RGBA8_UNORM,

			{  2, 1, 1, 1, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},					//R16_UNORM,
			{  4, 1, 1, 2, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},					//RG16_UNORM,
			{  6, 1, 1, 3, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},					//RGB16_UNORM,
			{  8, 1, 1, 4, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},					//RGBA16_UNORM,

			// snorm formats
			{  1, 1, 1, 1, CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},					//R8_SNORM,
			{  2, 1, 1, 2, CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},					//RG8_SNORM,
			{  3, 1, 1, 3, CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},					//RGB8_SNORM,
			{  4, 1, 1, 4, CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},					//RGBA8_SNORM,

			{  2, 1, 1, 1, CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},					//R16_SNORM,
			{  4, 1, 1, 2, CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},					//RG16_SNORM,
			{  6, 1, 1, 3, CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},					//RGB16_SNORM,
			{  8, 1, 1, 4, CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},					//RGBA16_SNORM,

			// Unsigned integer formats
			{  1, 1, 1, 1, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//R8U,
			{  2, 1, 1, 2, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//RG8U,
			{  3, 1, 1, 3, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//RGB8U,
			{  4, 1, 1, 4, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//RGBA8U,

			{  2, 1, 1, 1, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//R16U,
			{  4, 1, 1, 2, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//RG16U,
			{  6, 1, 1, 3, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//RGB16U,
			{  8, 1, 1, 4, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//RGBA16U,

			{  4, 1, 1, 1, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//R32U,
			{  8, 1, 1, 2, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//RG32U,
			{ 12, 1, 1, 3, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//RGB32U,
			{ 16, 1, 1, 4, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT},					//RGBA32U,

			/// Signed integer formats
			{  1, 1, 1, 1, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//R8I,
			{  2, 1, 1, 2, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//RG8I,
			{  3, 1, 1, 3, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//RGB8I,
			{  4, 1, 1, 4, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//RGBA8I,

			{  2, 1, 1, 1, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//R16I,
			{  4, 1, 1, 2, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//RG16I,
			{  6, 1, 1, 3, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//RGB16I,
			{  8, 1, 1, 4, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//RGBA16I,

			{  4, 1, 1, 1, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//R32I,
			{  8, 1, 1, 2, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//RG32I,
			{ 12, 1, 1, 3, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//RGB32I,
			{ 16, 1, 1, 4, CAP_INTEGER_BIT | CAP_SIGNED_BIT},					//RGBA32I,

			/// Floating formats
			{  2, 1, 1, 1, CAP_FLOAT_BIT | CAP_SIGNED_BIT},		//R16F,
			{  4, 1, 1, 2, CAP_FLOAT_BIT | CAP_SIGNED_BIT},		//RG16F,
			{  6, 1, 1, 3, CAP_FLOAT_BIT | CAP_SIGNED_BIT},		//RGB16F,
			{  8, 1, 1, 4, CAP_FLOAT_BIT | CAP_SIGNED_BIT},		//RGBA16F,

			{  4, 1, 1, 1, CAP_FLOAT_BIT | CAP_SIGNED_BIT},		//R32F,
			{  8, 1, 1, 2, CAP_FLOAT_BIT | CAP_SIGNED_BIT},		//RG32F,
			{ 12, 1, 1, 3, CAP_FLOAT_BIT | CAP_SIGNED_BIT},		//RGB32F,
			{ 16, 1, 1, 4, CAP_FLOAT_BIT | CAP_SIGNED_BIT},		//RGBA32F,

			/// sRGB formats
			{  3, 1, 1, 3, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_COLORSPACE_SRGB_BIT},		//SR8,
			{  3, 1, 1, 3, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_COLORSPACE_SRGB_BIT},		//SRG8,
			{  3, 1, 1, 3, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_COLORSPACE_SRGB_BIT},		//SRGB8,
			{  4, 1, 1, 4, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_COLORSPACE_SRGB_BIT},		//SRGB8_ALPHA8,

			/// Packed formats
			{  4, 1, 1, 4, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_PACKED_BIT},		//RGB10A2_UNORM,
			{  4, 1, 1, 4, CAP_INTEGER_BIT | CAP_UNSIGNED_BIT | CAP_PACKED_BIT},		//RGB10A2U,
			{  4, 1, 1, 3, CAP_PACKED_BIT | CAP_FLOAT_BIT | CAP_UNSIGNED_BIT},			//RGB9E5,
			{  4, 1, 1, 3, CAP_PACKED_BIT | CAP_FLOAT_BIT | CAP_SIGNED_BIT},			//RG11B10F,
			{  1, 1, 1, 3, CAP_PACKED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RG3B2,
			{  2, 1, 1, 3, CAP_PACKED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//R5G6B5,
			{  2, 1, 1, 4, CAP_PACKED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGB5A1,
			{  2, 1, 1, 4, CAP_PACKED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA4,

			// Swizzle formats
			{  3, 1, 1, 3, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_SWIZZLE_BIT},	//BGR8_UNORM,
			{  4, 1, 1, 4, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_SWIZZLE_BIT},	//BGRA8_UNORM,
			{  3, 1, 1, 3, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_SWIZZLE_BIT | CAP_COLORSPACE_SRGB_BIT},	//BGR8_UNORM,
			{  4, 1, 1, 4, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_SWIZZLE_BIT | CAP_COLORSPACE_SRGB_BIT},	//BGRA8_UNORM,

			// Luminance Alpha formats
			{  1, 1, 1, 1, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_LUMINANCE_ALPHA_BIT},	//L8_UNORM,
			{  1, 1, 1, 1, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_LUMINANCE_ALPHA_BIT},	//A8_UNORM,
			{  2, 1, 1, 2, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_LUMINANCE_ALPHA_BIT},	//LA8_UNORM,
			{  2, 1, 1, 1, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_LUMINANCE_ALPHA_BIT},	//L16_UNORM,
			{  2, 1, 1, 1, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_LUMINANCE_ALPHA_BIT},	//A16_UNORM,
			{  4, 1, 1, 2, CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT | CAP_LUMINANCE_ALPHA_BIT},	//LA16_UNORM,

			/// Depth formats
			{  2, 1, 1, 1, CAP_DEPTH_BIT | CAP_INTEGER_BIT},					//D16,
			{  4, 1, 1, 1, CAP_DEPTH_BIT | CAP_INTEGER_BIT},					//D24X8,
			{  4, 1, 1, 2, CAP_DEPTH_BIT | CAP_STENCIL_BIT},					//D24S8,
			{  4, 1, 1, 1, CAP_DEPTH_BIT | CAP_FLOAT_BIT},						//D32F,
			{  8, 1, 1, 2, CAP_DEPTH_BIT | CAP_STENCIL_BIT | CAP_FLOAT_BIT},	//D32FS8X24,

			/// Compressed formats
			{  8, 4, 4, 3, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGB_DXT1,
			{  8, 4, 4, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_DXT1,
			{ 16, 4, 4, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_DXT3,
			{ 16, 4, 4, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_DXT5,
			{  8, 4, 4, 1, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//R_ATI1N_UNORM,
			{  8, 4, 4, 1, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},		//R_ATI1N_SNORM,
			{ 16, 4, 4, 2, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RG_ATI2N_UNORM,
			{ 16, 4, 4, 2, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},		//RG_ATI2N_SNORM,
			{ 16, 4, 4, 3, CAP_COMPRESSED_BIT | CAP_FLOAT_BIT | CAP_UNSIGNED_BIT},			//RGB_BP_UF16,
			{ 16, 4, 4, 3, CAP_COMPRESSED_BIT | CAP_FLOAT_BIT | CAP_SIGNED_BIT},			//RGB_BP_SF16,
			{ 16, 4, 4, 3, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGB_BP_UNORM,
			{ 32, 8, 8, 3, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGB_PVRTC_4BPP_UNORM,
			{ 32, 16, 8, 3, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},	//RGB_PVRTC_2BPP_UNORM,
			{ 32, 8, 8, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_PVRTC_4BPP_UNORM,
			{ 32, 16, 8, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},	//RGBA_PVRTC_2BPP_UNORM,
			{ 32, 8, 8, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_PVRTC2_4BPP_UNORM,
			{ 32, 16, 8, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},	//RGBA_PVRTC2_2BPP_UNORM,
			{  8, 4, 4, 3, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//ATC_RGB,
			{ 16, 4, 4, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//ATC_RGBA_EXPLICIT_ALPHA,
			{ 16, 4, 4, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//ATC_RGBA_INTERPOLATED_ALPHA,
			{  8, 4, 4, 3, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//FORMAT_RGB_ETC_UNORM,
			{  8, 4, 4, 3, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGB_ETC2_UNORM,
			{  8, 4, 4, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGB_ETC2_PUNCHTHROUGH_ALPHA_UNORM,
			{ 16, 4, 4, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ETC2_UNORM,
			{  8, 4, 4, 1, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//R11_EAC_UNORM,
			{  8, 4, 4, 1, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},		//R11_EAC_SNORM,
			{ 16, 4, 4, 2, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RG11_EAC_UNORM,
			{ 16, 4, 4, 2, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_SIGNED_BIT},		//RG11_EAC_SNORM,
			{ 16, 4, 4, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_4x4,
			{ 16, 5, 4, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_5x4,
			{ 16, 5, 5, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_5x5,
			{ 16, 6, 5, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_6x5,
			{ 16, 6, 6, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_6x6,
			{ 16, 8, 5, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_8x5,
			{ 16, 8, 6, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_8x6,
			{ 16, 8, 8, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_8x8,
			{ 16, 10, 5, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},	//RGBA_ASTC_10x5,
			{ 16, 10, 6, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},	//RGBA_ASTC_10x6,
			{ 16, 10, 8, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},	//RGBA_ASTC_10x8,
			{ 16, 10, 10, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},	//RGBA_ASTC_10x10,
			{ 16, 12, 10, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},	//RGBA_ASTC_12x10,
			{ 16, 12, 12, 4, CAP_COMPRESSED_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},	//RGBA_ASTC_12x12,

			// Compressed sRGB formats
			{  8,  4,  4, 3, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//sRGB_DXT1,
			{  8,  4,  4, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//sRGB_DXT1,
			{ 16,  4,  4, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//sRGB_DXT3,
			{ 16,  4,  4, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//sRGB_DXT5,
			{ 16,  4,  4, 3, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//sRGB_BP,
			{ 32,  8,  8, 3, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//sRGB_PVRTC_4BPP,
			{ 32, 16,  8, 3, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//sRGB_PVRTC_2BPP,
			{ 32,  8,  8, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//sRGBA_PVRTC_4BPP,
			{ 32, 16,  8, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//sRGBA_PVRTC_2BPP,
			{ 32,  8,  8, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//sRGBA_PVRTC2_4BPP,
			{ 32, 16,  8, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//sRGBA_PVRTC2_2BPP,
			{  8,  4,  4, 3, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//SRGB_ETC2_UNORM,
			{  8,  4,  4, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//SRGB_ETC2_PUNCHTHROUGH_ALPHA_UNORM,
			{ 16,  4,  4, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//SRGBA_ETC2_UNORM,
			{ 16,  4,  4, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_4x4,
			{ 16,  5,  4, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_5x4,
			{ 16,  5,  5, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_5x5,
			{ 16,  6,  5, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_6x5,
			{ 16,  6,  6, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_6x6,
			{ 16,  8,  5, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_8x5,
			{ 16,  8,  6, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_8x6,
			{ 16,  8,  8, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//RGBA_ASTC_8x8,
			{ 16, 10,  5, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//SRGB8_ALPHA8_ASTC_10x5,
			{ 16, 10,  6, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//SRGB8_ALPHA8_ASTC_10x6,
			{ 16, 10,  8, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//SRGB8_ALPHA8_ASTC_10x8,
			{ 16, 10, 10, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//SRGB8_ALPHA8_ASTC_10x10,
			{ 16, 12, 10, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//SRGB8_ALPHA8_ASTC_12x10,
			{ 16, 12, 12, 4, CAP_COMPRESSED_BIT | CAP_COLORSPACE_SRGB_BIT | CAP_NORMALIZED_BIT | CAP_UNSIGNED_BIT},		//SRGB8_ALPHA8_ASTC_12x12,
		};

		GLM_STATIC_ASSERT(sizeof(Table) / sizeof(Table[0]) == FORMAT_COUNT, "GLI error: format descriptor list doesn't match number of supported formats");
		assert(Format != FORMAT_INVALID);

		return Table[Format];
	};

	inline std::uint32_t bits_per_pixel(format const & Format)
	{
		detail::format_info const & Info = detail::getFormatInfo(Format);

		return Info.BlockSize * 8 / (Info.BlockDimensionsX * Info.BlockDimensionsY);
	}
}//namespace detail

	inline std::uint32_t block_size(format const & Format)
	{
		return detail::getFormatInfo(Format).BlockSize;
	}

	inline std::uint32_t block_dimensions_x(format const & Format)
	{
		return detail::getFormatInfo(Format).BlockDimensionsX;
	}

	inline std::uint32_t block_dimensions_y(format const & Format)
	{
		return detail::getFormatInfo(Format).BlockDimensionsY;
	}

	inline std::uint32_t block_dimensions_z(format const & Format)
	{
		return 1;
	}

	inline std::uint32_t component_count(format const & Format)
	{
		return detail::getFormatInfo(Format).Component;
	}

}//namespace gli
